from aiogram import Router
from aiogram.filters import Command
from models import Messages
from states.states import UserState
from aiogram.fsm.context import FSMContext
import datetime
from services import user_service, task_service, KeyboardService
from utils import add_daily_task, get_first_day_of_week, get_selected_day, get_username_from_message
from aiogram.types import (
  InlineKeyboardMarkup,
  InlineKeyboardButton,
)
from .daily_page_handers import show_daily_tasks

router = Router()
PAGE_SIZE = 9

@router.message(lambda message: message.text == "–ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÖ", UserState.on_start_page)
async def show_weekly_tasks(message, state: FSMContext):
  """
  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  message_text = ""
  tasks = task_service.get_tasks_by_week_date(message.from_user.id, get_first_day_of_week(datetime.date.today()))

  if len(tasks) == 0:
    message_text = Messages.Errors.no_tasks
  else:
    message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    message_text += "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
    i = 0
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 0:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0

    message_text += "–í—Ç–æ—Ä–Ω–∏–∫:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 1:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0

    message_text += "–°—Ä–µ–¥–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 2:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0
    message_text += "–ß–µ—Ç–≤–µ—Ä–≥:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 3:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0
    message_text += "–ü—è—Ç–Ω–∏—Ü–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 4:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0

    message_text += "–°—É–±–±–æ—Ç–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 5:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0

    message_text += "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 6:
        i += 1
        message_text += f"{i}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

    i = 0
    message_text += "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
    for task in tasks:
      if not task.day_date:
        i += 1
        message_text += f"{i + 1}. {task.title}\n"
        if task.start_time:
          message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
        message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
        if task.deadline:
          message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
        message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n"
    message_text += "\n"

  await state.set_state(UserState.on_week_page)
  await state.update_data({"week_first_day_date": get_first_day_of_week(datetime.date.today())})
  await state.update_data({"day_date": datetime.date.today()})

  keyboard = KeyboardService.get_weekly_tasks_keyboard(message.from_user.id)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", UserState.on_week_page)
async def edit_weekly_task(message, state: FSMContext):
  """
  –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  data = await state.get_data()
  user_id = data.get("user_id", 0)
  if user_id == 0:
    user_id = message.from_user.id
    await state.update_data({"user_id": user_id})
  tasks = task_service.get_tasks_by_week_date(user_id, get_first_day_of_week(datetime.date.today()))
  if len(tasks) == 0:
    keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
    await message.answer(
      text=Messages.Errors.no_tasks,
      reply_markup=keyboard
    )
    return

  data = await state.get_data()
  page_index = data.get("page", 1)
  message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ " + str(page_index) + ":\n\n"
  buttons = []

  if len(tasks) < page_index * PAGE_SIZE:
    for i in range(len(tasks) - (PAGE_SIZE * (page_index - 1))):
      button = InlineKeyboardButton(
        text=tasks[i + PAGE_SIZE * (page_index - 1)].title,
        callback_data="edit_weekly_task_" + str(tasks[PAGE_SIZE * (page_index - 1) + i].task_id)
      )
      buttons.append([button])
  else:
    current_page_tasks = tasks[(page_index - 1) * PAGE_SIZE: (page_index) * PAGE_SIZE]
    for i in range(PAGE_SIZE):
      button = InlineKeyboardButton(
        text=current_page_tasks[i].title,
        callback_data="edit_weekly_task_" + str(current_page_tasks[i].task_id)
      )
      buttons.append([button])

  if page_index > 1:
    button = InlineKeyboardButton(
      text="‚¨ÖÔ∏è",
      callback_data="edit_weekly_page_" + str(page_index - 1)
    )
    buttons.append([button])

  if len(tasks) > page_index * PAGE_SIZE:
    button = InlineKeyboardButton(
      text="‚û°Ô∏è",
      callback_data="edit_weekly_page_" + str(page_index + 1)
    )
    buttons.append([button])

  keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
  await state.set_state(UserState.edit_weekly_task)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )

@router.callback_query(lambda query: query.data.startswith("edit_weekly_page_"))
async def edit_weekly_page(callback_query, state: FSMContext):
  """
  –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(callback_query.from_user.id, get_username_from_message(callback_query))

  page_index = int(callback_query.data.split("_")[3])
  await state.update_data({"page": page_index})
  await state.update_data({"user_id": callback_query.from_user.id})
  await edit_weekly_task(callback_query.message, state)

@router.message(lambda message: message.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", UserState.on_week_page)
async def mark_as_done(message, state: FSMContext):
  """
  –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  data = await state.get_data()
  user_id = data.get("user_id", 0)
  if user_id == 0:
    user_id = message.from_user.id
    await state.update_data({"user_id": user_id})
  tasks = task_service.get_tasks_by_week_date(user_id, get_first_day_of_week(datetime.date.today()))
  if len(tasks) == 0:
    print("test")
    keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
    await message.answer(
      text=Messages.Errors.no_tasks,
      reply_markup=keyboard
    )
    return

  data = await state.get_data()
  page_index = data.get("page", 1)
  message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ " + str(page_index) + ":\n\n"
  buttons = []

  if len(tasks) < page_index * PAGE_SIZE:
    for i in range(len(tasks) - (PAGE_SIZE * (page_index - 1))):
      button = InlineKeyboardButton(
        text=tasks[i + PAGE_SIZE * (page_index - 1)].title,
        callback_data="edit_weekly_task_status_" + str(tasks[PAGE_SIZE * (page_index - 1) + i].task_id)
      )
      buttons.append([button])
  else:
    current_page_tasks = tasks[(page_index - 1) * PAGE_SIZE: (page_index) * PAGE_SIZE]
    for i in range(PAGE_SIZE):
      button = InlineKeyboardButton(
        text=current_page_tasks[i].title,
        callback_data="edit_weekly_task_status_" + str(current_page_tasks[i].task_id)
      )
      buttons.append([button])

  if page_index > 1:
    button = InlineKeyboardButton(
      text="‚¨ÖÔ∏è",
      callback_data="edit_weekly_page_" + str(page_index - 1)
    )
    buttons.append([button])

  if len(tasks) > page_index * PAGE_SIZE:
    button = InlineKeyboardButton(
      text="‚û°Ô∏è",
      callback_data="edit_weekly_page_" + str(page_index + 1)
    )
    buttons.append([button])

  keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
  await state.set_state(UserState.edit_weekly_task)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )

@router.callback_query(lambda query: query.data.startswith("edit_weekly_task_status_"))
async def edit_weekly_task_status(callback_query, state: FSMContext):
  """
  –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(callback_query.from_user.id, get_username_from_message(callback_query))

  task_id = int(callback_query.data.split("_")[4])
  task = task_service.get_task_by_id(task_id)

  if task is None:
    keyboard = KeyboardService.get_return_main_page_keyboard(callback_query.from_user.id)
    await callback_query.message.answer(
      text=Messages.Errors.task_not_found,
      reply_markup=keyboard
    )

  if task.completed:
    keyboard = KeyboardService.get_return_main_page_keyboard(callback_query.from_user.id)
    await callback_query.message.answer(
      text="–ó–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!",
      reply_markup=keyboard
    )
    return
  
  task_service.invert_task_status(task_id)

  await state.set_state(UserState.on_week_page)
  keyboard = KeyboardService.get_main_page_keyboard(callback_query.from_user.id)
  await callback_query.message.answer(
    text="–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω!",
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", UserState.on_week_page)
async def add_weekly_task(message, state: FSMContext):
  """
  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–∏ÃÜ –Ω–µ–¥–µ–ª—å–Ω–æ–∏ÃÜ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  await state.set_data({
    "user_id": message.from_user.id,
    "week_first_day_date": get_first_day_of_week(datetime.date.today()),
    "day_date": None
  })

  await state.set_state(UserState.add_task_date)
  keyboard = KeyboardService.get_yes_or_no_keyboard(message.from_user.id)
  await message.answer(
    text="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–µ?",
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é", UserState.on_week_page)
async def move_to_next_week(message, state: FSMContext):
  """
  –ü–µ—Ä–µ–Ω–æ—Å –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  data = await state.get_data()
  week_date = data.get("week_first_day_date")
  task_service.move_to_next_week(message.from_user.id, week_date)

  await state.set_state(UserState.on_start_page)
  keyboard = KeyboardService.get_main_page_keyboard(message.from_user.id)
  await message.answer(
    text="–ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é",
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", UserState.on_week_page)
async def show_daily_tasks_from_week(message, state: FSMContext):
  """
  –ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  await state.set_state(UserState.waiting_day_date)
  keyboard = KeyboardService.get_edit_task_date_keyboard(message.from_user.id)

  await message.answer(
    text=Messages.AddTask.edit_task_date,
    reply_markup=keyboard
  )

@router.message(UserState.waiting_day_date)
async def process_day_date(message, state: FSMContext):
  """
  –ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  day_date, error = get_selected_day(message.text)
  if error:
    keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
    await message.answer(
      text=error,
      reply_markup=keyboard
    )
    return

  data = await state.get_data()
  week_first_day = data.get("week_first_day_date")
  date = week_first_day + datetime.timedelta(days=day_date)

  await state.update_data({"day_date": date})
  await show_daily_tasks(message, state)

@router.message(lambda message: message.text == "‚è© –ê–≤—Ç–æ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", UserState.on_week_page)
async def distribute_weekly_tasks(message, state: FSMContext):
  """
  –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –Ω–∞ –Ω–µ–¥–µ–ª—é
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))

  data = await state.get_data()
  week_first_day = data.get("week_first_day_date")

  task_service.distribute_tasks(message.from_user.id, week_first_day)

  await state.set_state(UserState.on_start_page)
  keyboard = KeyboardService.get_main_page_keyboard(message.from_user.id)
  await message.answer(
    text="–ó–∞–¥–∞—á–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã",
    reply_markup=keyboard
  )