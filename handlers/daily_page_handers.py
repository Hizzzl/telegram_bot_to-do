from aiogram import Router
from aiogram.filters import Command
from models import Messages
from states.states import UserState
from aiogram.fsm.context import FSMContext
import datetime
from services import user_service, task_service, KeyboardService
from utils import add_daily_task as process_daily_task, get_first_day_of_week, get_username_from_message
from aiogram.types import (
  InlineKeyboardMarkup,
  InlineKeyboardButton,
)

router = Router()
PAGE_SIZE = 9

@router.message(lambda message: message.text == "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ üìÖ", UserState.on_start_page)
async def show_daily_tasks(message, state: FSMContext):
  """
  –ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  message_text = ""

  data = await state.get_data()
  day_date = data.get("day_date", datetime.date.today())

  tasks = task_service.get_tasks_by_date(message.from_user.id, day_date)
  if len(tasks) == 0:
    message_text = Messages.Errors.no_tasks
  else:
    message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    for i, task in enumerate(tasks):
      message_text += f"{i + 1}. {task.title}\n"
      if task.start_time:
        message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
      message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
      if task.deadline:
        message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
      message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"

  await state.set_state(UserState.on_day_page)
  await state.update_data({"week_first_day_date": get_first_day_of_week(datetime.date.today())})
  
  day_date = data.get("day_date", datetime.date.today())
  if day_date == datetime.date.today():
    await state.update_data({"day_date": datetime.date.today()})

  keyboard = KeyboardService.get_daily_tasks_keyboard(message.from_user.id)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )


@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", UserState.on_day_page)
async def add_daily_task(message, state: FSMContext):
  """
  –î–æ–±–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  await process_daily_task(message, state)

@router.message(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É", UserState.on_day_page)
async def edit_daily_task(message, state: FSMContext):
  """
  –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  tasks = task_service.get_tasks_by_date(message.from_user.id, datetime.date.today())

  if len(tasks) == 0:
    keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
    await message.answer(
      text=Messages.Errors.no_tasks,
      reply_markup=keyboard
    )
    return

  page_index = 1
  message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ " + str(page_index) + ":\n\n"
  buttons = []

  if len(tasks) < page_index * PAGE_SIZE:
    for i in range(len(tasks)):
      button = InlineKeyboardButton(
        text=tasks[i].title,
        callback_data="edit_task_" + str(tasks[PAGE_SIZE * (page_index - 1) + i].task_id)
      )
      buttons.append([button])
  else:
    current_page_tasks = tasks[(page_index - 1) * PAGE_SIZE: (page_index) * PAGE_SIZE]
    for i in range(PAGE_SIZE):
      button = InlineKeyboardButton(
        text=current_page_tasks[i].title,
        callback_data="edit_task_" + str(current_page_tasks[i].task_id)
      )
      buttons.append([button])
  
  if page_index > 1:
    button = InlineKeyboardButton(
      text="‚¨ÖÔ∏è",
      callback_data="prev_tasks_page_" + str(page_index)
    )
    buttons.append([button])

  if len(tasks) > (page_index) * PAGE_SIZE:
    button = InlineKeyboardButton(
      text="‚û°Ô∏è",
      callback_data="next_tasks_page_" + str(page_index)
    )
    buttons.append([button])
  page_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

  await state.update_data({"tasks": tasks, "page": page_index})
  await state.set_state(UserState.print_edit_tasks_page)
  await message.answer(
    text=message_text,
    reply_markup=page_keyboard
  )

@router.message(lambda message: message.text == "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", UserState.on_day_page)
async def mark_daily_task(message, state: FSMContext):
  """
  –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
  """
  data = await state.get_data()
  day_date = data.get("day_date", datetime.date.today())

  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  tasks = task_service.get_tasks_by_date(message.from_user.id, day_date)

  if len(tasks) == 0:
    keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
    await message.answer(
      text=Messages.Errors.no_tasks,
      reply_markup=keyboard
    )
    return

  page_index = 1
  message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ " + str(page_index) + ". –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π:\n\n"
  buttons = []

  if len(tasks) < page_index * PAGE_SIZE:
    for i in range(len(tasks)):
      button = InlineKeyboardButton(
        text=tasks[i].title,
        callback_data="edit_status_" + str(tasks[PAGE_SIZE * (page_index - 1) + i].task_id)
      )
      buttons.append([button])
  else:
    current_page_tasks = tasks[(page_index - 1) * PAGE_SIZE: (page_index) * PAGE_SIZE]
    for i in range(PAGE_SIZE):
      button = InlineKeyboardButton(
        text=current_page_tasks[i].title,
        callback_data="edit_status_" + str(current_page_tasks[i].task_id)
      )
      buttons.append([button])
  
  if page_index > 1:
    button = InlineKeyboardButton(
      text="‚¨ÖÔ∏è",
      callback_data="prev_tasks_page_" + str(page_index)
    )
    buttons.append([button])

  if len(tasks) > (page_index) * PAGE_SIZE:
    button = InlineKeyboardButton(
      text="‚û°Ô∏è",
      callback_data="next_tasks_page_" + str(page_index)
    )
    buttons.append([button])
  page_keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

  await state.update_data({"tasks": tasks, "page": page_index})
  await state.set_state(UserState.print_edit_tasks_page)
  await message.answer(
    text=message_text,
    reply_markup=page_keyboard
  )

@router.message(lambda message: message.text == "‚û°Ô∏è –ó–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –∑–∞–¥–∞—á–∏", UserState.on_day_page)
async def show_tomorrow_tasks(message, state: FSMContext):
  """
  –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  message_text = ""

  data = await state.get_data()
  curr_date = data.get("day_date", datetime.date.today())
  day_date = curr_date + datetime.timedelta(days=1)

  tasks = task_service.get_tasks_by_date(message.from_user.id, day_date)

  if len(tasks) == 0:
    message_text = Messages.Errors.no_tasks
  else:
    message_text = "–ó–∞–¥–∞—á–∏ –∑–∞ " + str(day_date) + ":\n\n"
    for i, task in enumerate(tasks):
      message_text += f"{i + 1}. {task.title}\n"
      if task.start_time:
        message_text += f"   üïí –ù–∞—á–∞–ª–æ: {task.start_time.strftime('%H:%M')}\n"
      message_text += f"   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {task.duration} –º–∏–Ω—É—Ç\n"
      if task.deadline:
        message_text += f"   üìÖ –î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y')}\n"
      message_text += f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {'–í—ã–ø–æ–ª–Ω–µ–Ω–æ' if task.completed else '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"


  await state.set_state(UserState.on_day_page)
  await state.update_data({"week_first_day_date": get_first_day_of_week(day_date)})
  await state.update_data({"day_date": day_date})

  keyboard = KeyboardService.get_daily_tasks_keyboard(message.from_user.id)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞", UserState.on_day_page)
async def move_tomorrow_tasks(message, state: FSMContext):
  """
  –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  data = await state.get_data()
  curr_date = data.get("day_date", datetime.date.today())
  day_date = curr_date + datetime.timedelta(days=1)

  task_service.move_tasks_by_date(message.from_user.id, curr_date, day_date)

  keyboard = KeyboardService.get_return_main_page_keyboard(message.from_user.id)
  await message.answer(
    text="–ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –Ω–∞ " + str(day_date) + ".",
    reply_markup=keyboard
  )

@router.message(lambda message: message.text == "üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏", UserState.on_day_page)
async def show_weekly_tasks(message, state: FSMContext):
  """
  –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
  """
  user_service.update_user_exists(message.from_user.id, get_username_from_message(message))
  message_text = ""
  tasks = task_service.get_tasks_by_week_date(message.from_user.id, get_first_day_of_week(datetime.date.today()))

  if len(tasks) == 0:
    message_text = Messages.Errors.no_tasks
  else:
    message_text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n"
    message_text += "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
    i = 0
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 0:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0

    message_text += "–í—Ç–æ—Ä–Ω–∏–∫:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 1:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0

    message_text += "–°—Ä–µ–¥–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 2:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0
    message_text += "–ß–µ—Ç–≤–µ—Ä–≥:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 3:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0
    message_text += "–ü—è—Ç–Ω–∏—Ü–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 4:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0

    message_text += "–°—É–±–±–æ—Ç–∞:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 5:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
    message_text += "\n"

    i = 0

    message_text += "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ:\n"
    for task in tasks:
      if task.day_date and task.day_date.weekday() == 6:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"

    i = 0
    message_text += "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
    for task in tasks:
      if not task.day_date:
        i += 1
        if task.completed:
          check = "‚úÖ"
        else:
          check = "‚ùå"
        message_text += str(i) + ".\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ: " + str(task.title) + "\n" + "–í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + check + "\n" + "–î–µ–¥–ª–∞–∏ÃÜ–Ω: " + str(task.deadline) + "\n" + "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + str(task.duration) + " –º–∏–Ω—É—Ç\n"
  await state.set_state(UserState.on_week_page)
  await state.update_data({"week_first_day_date": get_first_day_of_week(datetime.date.today())})
  await state.update_data({"day_date": datetime.date.today()})

  keyboard = KeyboardService.get_weekly_tasks_keyboard(message.from_user.id)
  await message.answer(
    text=message_text,
    reply_markup=keyboard
  )